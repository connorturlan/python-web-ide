- title: "Hello, World!"
  content: |
    This is the tutorial text for a simple hello, world program.
    Write the below line to get the console to print out 'Hello, World!'.
    $print('hello, world!')
  example: |
    print('hello, world!')
  hint:
    title: print("hello, world!")
    content: |
      print any string of characters between the parenthesises
      hehehe

- title: "Help!"
  content: |
    You can use:
    $print()
    To output the value of various contants and variables!
    If you are ever stuck and want to know the contents of your program, don't be afraid to use it.
  example: |
    print(1)
    print("This is a test.")
    print({"a":1, "b":2})

- title: "Variables"
  content: |
    You can use names to store values, here are some examples.
    By using "=" any label on the left hand side will be assigned the value on the right.
    Play around, add your own, and try print them out.
  example: |
    a = 0
    b = "apple"
    c = {}
    d = b
    print(a, b, c, d)
  hint:
    title: variable = value
    content: |
      set the label on the left to the value on the right
      this can be a number, "string", or list!

- title: "Lists"
  content: |
    There are also special variable types that can store more complicated data.
    $list = [1, 2, 3]
    Lists allow you to store multiple values in a single variable.
    You can get a single value from it with:
    $print(list[0])
    This is called "indexing". Always remember that the index will start at 0!
    Try print the 3rd element in this list.
  example: |
    my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    print(my_list[0])
  hint:
    title: my_list[n]
    content: |
      returns the n-th element in a list starting from 0!
      0 returns the first element, and 2 will return the third.
- title: "Variables - Test"
  content: |
    !Make the print statement output the 3rd element of the list.
  example: |
    my_list = [0, 1, 2, 3]
    print(my_list[0])
  isTest: true
  expect: |
    2
  solution: |
    my_list = [0, 1, 2, 3]
    print(my_list[2])

- title: "Dictionaries"
  content: |
    Dictionaries are like lists, but instead of using numbers to index them we can use strings like so:
    $dictionary = {"apples": 20, "bananas": 10}
    And you can get a value from it with:
    $print(dictionary["apples"])
    To add items to the dictionary you can use:
    $dictionary["<key>"] = <value> # just like with variables!
    You can also store lists and dictionaries within each other to create even more complex data, but we'll come back to that later.
    Add a new key to the dictionary to remove the error.
  example: |
    my_dictionary = {"apples": 20, "bananas": 10}
    print(my_dictionary["apples"])
  hint:
    title: my_dict[string]
    content: |
      returns the element in a dictionary named string

- title: "If Statements"
  content: |
    'if' statements let you control the flow of your program.
    They are structured like so:
    $if a == b or a != c:
    .   do this
    .else:
    .   do that
    You don't always need an else block but it will prevent you duplicating code!
    That's right! Programmers like to be lazy :)
    !Try changing the program to print out "success!"
  example: |
    b = 1

    # leave this code unchanged.
    if b == 2:
        print("success")
    else:
        print("fail")
  isTest: true
  expect: |
    success
  solution: |
    b = 2
    if b == 2:
        print("success")
    else:
        print("fail")
  hint:
    title: |
      if <condition>:
      --this
      else:
      --that
    content: |
      if the condition is true do this, otherwise do that.
      remember that every line after a colon ':' needs to be indented.

- title: Go Fish
  content: |
    Dictionaries let you find out if they contain a word or `key` by using:
    $cards = {"one": 01, "two": 10}
    .if "three" in cards:
    .  print("go fish")
    The `in` keyword return true or false whether a key exists within a dictionary.
    This is really useful to check if we have a value in a dictionary to prevent errors!
    !Fix the code below to check whether the key exists in the dictionary before adding.
  example: |
    store = {"apples": 20, "bananas": 10}

    print("i'm craving a crepe, i'll add 10 to my cart!")

    # add a statement here to make sure there are crepes in the store.
    print("oh... they only have", store["crepes"], "crepes")
  hint:
    title: my_dict[string]
    content: |
      returns the element in a dictionary named string

- title: "For Loops"
  content: |
    For loops are a way of repeating sections of code without having to write anymore code.
    We can count from 0 to 9 by using:
    $for i in range(10):
    .    print(i)
    Notice that this doesn't include the last number!
  example: |
    for i in range(3):
      print(i)
  hint:
    title: |
      for i in range(n):
      --do this
    content: |
      repeat this n times, store how many times we've looped in 'i'.

# - title: "While Loops"
#   content: |
#     While loops are similar to For loops, but instead of doing something a set amount of times, they will continue while a give statement is true.
#     We can count from 0 to 9 by using:
#     $i = 0
#     .while i <= 10:
#     .    print(i)
#     .    i = i + 1
#     Notice that this doesn't include the last number!
#     !Always make sure that you change the value inside the while loop or you'll have an infinite loop!!!
#   example: |
#     i = 0
#     while i < 3:
#       print(i)
#       i = i + 1
#   hint:
#     title: |
#       while <condition>:
#       --do this
#     content: |
#       repeat while <condition> is true.

- title: "Loopy Lists"
  content: |
    You can use For loops to go through a list like so:
    $my_words = ["The", "quick", "brown", "fox"]
    .for word in my_words:
    .    print(word)
    This will, for each loop print out the next word in the list!
    !Now do the same thing with the new word list!
  example: |
    word_list = ["jumps", "over", "the", "lazy", "dog"]
  isTest: true
  expect: |
    jumps
    over
    the
    lazy
    dog
  solution: |
    word_list = ["jumps", "over", "the", "lazy", "dog"]
    for word in word_list:
        print(word)

- title: "Randomness"
  content: |
    You can get a random number within a range by using:
    $random.randrange(n, m)
    Where "n" is the minimum and "m" is the maximum.
    If you're every using this, make sure to import the random module first!
    !Try running the code on the left and see what you get each time.
  example: |
    import random
    print(random.randrange(0, 100))
  hint:
    title: |
      random.randrange(n, m)
    content: |
      return a random number between n and m, not including m.

- title: "Random Words"
  content: |
    You can also use this to choose a random item from a list, the random module gives us:
    $random.choice()
    Try it with the word list provided!
    P.S. The ".split()" method generates a list from a string, breaking it on certain characters.
  example: |
    import random
    word_list = "Sphinx of black quartz judge my vow".split()
    print(random.choice(word_list))
  hint:
    title: |
      random.choice(list)
    content: |
      return a random element from the provided list.

- title: "Give me a word... any word."
  content: |
    In frequency based text generation, you're given a list of words and the chance that they will follow the previous one.
    For this example we will simplify and give you an array of words to choose from.
    You will expect the structure to be:
    $word_list = ["apple", "banana", "cracker"]
    The expected output is:
    $word = "apple"
    or
    $word = "banana"
    !The idea is that you are returning a random word for the given word list!
  example: |
    from src.main import generate_text_from_file
    import random

    def get_next_word(word_list):
      # insert your code below here...
      # select a random word from `word_list`.

      # and above here!
      return word

    generate_text_from_file('./drseuss.txt', word=get_next_word)
  isTest: true
  expect_end: ===== done =====
  solution: |
    from src.main import generate_text_from_file
    import random

    def get_next_word(word_list):
      word = random.choice(word_list)
      return word

    generate_text_from_file('./drseuss.txt', word=get_next_word)

- title: "Extending the list."
  content: |
    lists can be made longer by using:
    $a = [1, 2, 3]
    .a.append(4)
    .print(a)
    which will print
    $ [1, 2, 3, 4]
    !try and extend the next list with the value in b
  example: |
    a = ["apple"]
    b = "banana"
    #join the lists here.
    print(a)
  isTest: true
  expect: |
    ['apple', 'banana']
  solution: |
    a = ["apple"]
    b = "banana"
    a.append(b)
    print(a)

- title: "Lists to strings!"
  content: |
    to make lists into single strings, we can use the string.join method.
    $' '.join(my_list)
    this will join all the elements in 'my_list' with the string, " " (which is just a space.)
  example: |
    list_a = ["this", "is", "a", "test"]
    print('üëè'.join(list_a))
  hint:
    title: |
      'string'.join(my_list)
    content: |
      join each element of my list with whatever is contained in string.

- title: "Let's make some sentences."
  content: |
    $word_map
    Contains all of the trailing words that follow a given word, and looks like:
    ${"the": ["quick", "lazy"], "quick": ["brown"], ...}
    !Using the get next word function provided, generate a sentence that ends when the next word is '.'.
     ...yes we are going to count a full stop as a word!
    Don't forget to join the list into a string before you return!
    Expect to output:
    $"the quick brown fox."
  example: |
    from src.main import generate_text_from_file
    import random

    def construct_sentence(word_freq, get_next_word):
      # use this line to select a new word.
      word = random.choice([word for word in word_freq])

      # insert your code below here...

      # while word is not equal to a full stop...
      # append a word to the sentence.
      # remember to use selection and iteration.

      # and above here!
      return sentence

    generate_text_from_file('./drseuss.txt', sentence=construct_sentence)
  isTest: true
  expect_end: ===== done =====
  solution: |
    from src.main import generate_text_from_file
    import random

    def construct_sentence(word_freq, get_next_word):
      word = random.choice([word for word in word_freq])
      # insert your code below here...
      sentence = [word]
      while word != '.':
        word_list = word_freq[word]
        word = get_next_word(word_list)
        sentence.append(word)
      # and above here!
      return ' '.join(sentence)

    generate_text_from_file('./drseuss.txt', sentence=construct_sentence)

- title: "Let's parse some text in..."
  content: |
    Here we have a simple list that will give you all the words in a text.
    To begin with, add all of the words to a dictionary!
    You can do this with:
    $dictionary['word'] = []
    !Expected input
    $['the', 'quick', 'brown']
    !Expected output
    ${'the': [], 'quick': []}
  example: |
    from src.main import Reader, generate_text_from_file
    import random

    def parse_text(text):
      # insert your code below here...

      # create a dictionary for words
      # in the dictionary, add the word and use a list for the value.

      # and above here!
      return word_freqs

    # don't touch this code...
    text = Reader()
    with open("fox.txt", 'r') as file:
        text.read(file)
    print(parse_text(text))
  isTest: true
  expect: |
    {'the': [], 'quick': [], 'brown': [], 'fox': [], 'jumps': [], 'over': [], 'lazy': [], 'dog': [], '.': []}
  solution: |
    from src.main import Reader, generate_text_from_file
    import random

    def parse_text(text):
      # insert your code below here...
      word_freqs = {}
      for word in text:
        word_freqs[word] = []
      # and above here!
      return word_freqs

    # don't touch this code...
    text = Reader()
    with open("fox.txt", 'r') as file:
        text.read(file)
    print(parse_text(text))

- title: "And now let's get the counts"
  content: |
    Now that we've got the words into the frequency map, we can start to add the word lists.
    To do this, we need to store the last word, then add the current word to the list belonging to it.
    Be careful to not overwrite you word lists though! Make sure to check if the word list already exists with:
    $if word not in word_freq:
    .  freq[word] = []
  example: |
    from src.main import Reader, generate_text_from_file
    import random

    def parse_text(text):
      word_freq = {}
      last_word = text[0]
      # insert your code below here...

      # keep reading the text while there are words to read
      # keep track of the last word
      # add the current word to a list of words that follow the last word

      # and above here!
      return word_freq

    # don't touch this code...
    text = Reader()
    with open("fox.txt", 'r') as file:
        text.read(file)
    print(parse_text(text))
  isTest: true
  expect: |
    {'the': ['quick', 'lazy'], 'quick': ['brown'], 'brown': ['fox'], 'fox': ['jumps'], 'jumps': ['over'], 'over': ['the'], 'lazy': ['dog'], 'dog': ['.']}
  solution: |
    from src.main import Reader, generate_text_from_file
    import random

    def parse_text(text):
      word_freq = {}
      last_word = text[0]
      # insert your code below here...
      for word in text[1:]:
        # insert the word into the freq list.
        if last_word not in word_freq:
            word_freq[last_word] = []

        # add the word to the word list of the last word.
        word_freq[last_word].append(word)

        # set the new last word.
        last_word = word
      # and above here!
      return word_freq

    # don't touch this code...
    text = Reader()
    with open("fox.txt", 'r') as file:
        text.read(file)
    print(parse_text(text))

- title: "Put it all together now!"
  content: |
    Copy all your code from the previous lessons and integrate it here.
    Don't worry, all you code is saved when you go back and forth.
  example: |
    from src.main import Reader, generate_text_from_file
    import random

    def parse_text(text):
      # insert your code below here...

      # and above here!
      return word

    def construct_sentence(word_freq, get_next_word):
      first_word = random.choice([word for word in word_freq])
      # insert your code below here...

      # and above here!
      return sentence

    def get_next_word(word_list):
      # insert your code below here...

      # and above here!
      return word

    generate_text_from_file('./drseuss.txt', parse=parse_text, sentence=construct_sentence, word=get_next_word)

- title: "Text Generator"
  content: |
    This is the final product for a text generator.
    Feel free to change to file other texts available are:
    $drseuss.txt
    .thelorax.txt
    .philosophy.txt
  example: |
    from src.main import generate_text_from_file
    generate_text_from_file('./thelorax.txt')
