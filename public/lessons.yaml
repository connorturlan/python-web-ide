- title: "Hello, World!"
  content: |
      This is the tutorial text for a simple hello, world program.
      Write the below line to get the console to print out 'Hello, World!'.
      $print('hello, world!')
  example: |
      print('hello, world!')
- title: "Help!"
  content: |
      You can use:
      $print()
      To output the value of various contants and variables!
      If you are ever stuck and want to know the contents of your program, don't be afraid to use it.
  example: |
      print(1)
      print("This is a test.")
      print({"a":1, "b":2})
- title: "Variables"
  content: |
      You can use names to store values, here are some examples.
      By using "=" any label on the left hand side will be assigned the value on the right.
      Play around, add your own, and try print them out.
  example: |
      a = 0
      b = "apple"
      c = {}
      print(a, b, c)
- title: "Lists"
  content: |
      There are also special variable types that can store more complicated data.
      $list = [1, 2, 3]
      Lists allow you to store multiple values in a single variable.
      You can get a single value from it with:
      $print(list[0])
      This is called "indexing". Always remember that the index will start at 0!
      Try print the 3rd element in this list.
  example: |
      my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      print(my_list[0])
- title: "Variables - Test"
  content: |
      !Make the print statement output the 3rd element of the list.
  example: |
      my_list = [0, 1, 2, 3]
      print(my_list[0])
  isTest: true
  expect: |
      2
- title: "Dictionaries"
  content: |
      Dictionaries are like lists, but instead of using numbers to index them we can use strings like so:
      $dictionary = {"apples": 20, "bananas": 10}
      And you can get a value from it with:
      $print(dictionary["apples"])
      You can also store lists and dictionaries within each other to create even more complex data, but we'll come back to that later.
      Add a new key to the dictionary to remove the error.
  example: |
      my_dictionary = {"apples": 20, "bananas": 10}
      print(my_dictionary["carrots"])
- title: "If Statements"
  content: |
      'if' statements let you control the flow of your program.
      They are structured like so:
      $if <condition>:
      .   do this
      .else:
      .   do that
      You don't always need an else block but it will prevent you duplicating code!
      That's right! Programmers like to be lazy :)
      !Try changing the program to print out "success!"
  example: |
      b = 1
      if b == 2:
          print("success")
      else:
          print("fail")
  isTest: true
  expect: |
      success
- title: "For Loops"
  content: |
      For loops are a way of repeating sections of code without having to write anymore code.
      We can count from 0 to 9 by using:
      $for i in range(10):
      .    print(i)
      Notice that this doesn't include the last number!
  example: |
      for i in range(3):
        print(i)
- title: "While Loops"
  content: |
      While loops are similar to For loops, but instead of doing something a set amount of times, they will continue while a give statement is true.
      We can count from 0 to 9 by using:
      $i = 0
      .while i <= 10:
      .    print(i)
      .    i += 1
      Notice that this doesn't include the last number!
      !Always make sure that you change the value inside the while loop or you'll have an infinite loop!!!
  example: |
      i = 0
      while i < 3:
        print(i)
        i += 1
- title: "Loopy Lists"
  content: |
      You can use For loops to go through a list like so:
      $my_words = ["The", "quick", "brown", "fox"]
      .for word in my_words:
      .    print(word)
      This will, for each loop print out the next word in the list!
      !Now do the same thing with the new word list!
  example: |
      word_list = ["jumps", "over", "the", "lazy", "dog"]
  isTest: true
  expect: |
      jumps
      over
      the
      lazy
      dog
- title: "Randomness"
  content: |
      You can get a random number within a range by using:
      $random.randrange(n, m)
      Where "n" is the minimum and "m" is the maximum.
      If you're every using this, make sure to import the random module first!
      !Try running the code on the left and see what you get each time.
  example: |
      import random
      print(random.randrange(0, 100))
- title: "Random Words"
  content: |
      You can also use this to choose a random item from a list, the random module gives us:
      $random.choice()
      Try it with the word list provided!
      P.S. The ".split()" method generates a list from a string, breaking it on certain characters.
  example: |
      import random
      word_list = "Sphinx of black quartz judge my vow".split()
      print(random.choice(word_list))
- title: "Give me a word. Any word."
  content: |
      In frequency based text generation, you're given a dictionary of words and the chance that they will follow the previous one.
      You will expect the structure to be:
      $word_freq = {"apple": 1, "banana": 2}
      You can use "expand_word_list" to get a one layer list to select a word from.
  example: |
      from src.main import generate_text_from_file, expand_word_list
      import random

      def get_next_word(word_freq):
        #insert your code here
        return word

      generate_text_from_file('./drseuss.txt', word=get_next_word)
  isTest: true
  expect_end: ===== done =====
- title: "Variables"
  content: |
      .
  example: |
      .
- title: "Text Generator"
  content: "Hit run! You can trust me. ;)"
  example: |
      from src.main import generate_text_from_file
      generate_text_from_file('./thelorax.txt')
