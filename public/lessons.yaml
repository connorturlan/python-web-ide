- title: "Hello, World!"
  content: |
    This is the tutorial text for a simple hello, world program.
    Write the below line to get the console to print out 'Hello, World!'.
    $print('hello, world!')
  example: |
    print('hello, world!')
- title: "Help!"
  content: |
    You can use:
    $print()
    To output the value of various contants and variables!
    If you are ever stuck and want to know the contents of your program, don't be afraid to use it.
  example: |
    print(1)
    print("This is a test.")
    print({"a":1, "b":2})
- title: "Variables"
  content: |
    You can use names to store values, here are some examples.
    By using "=" any label on the left hand side will be assigned the value on the right.
    Play around, add your own, and try print them out.
  example: |
    a = 0
    b = "apple"
    c = {}
    print(a, b, c)
- title: "Lists"
  content: |
    There are also special variable types that can store more complicated data.
    $list = [1, 2, 3]
    Lists allow you to store multiple values in a single variable.
    You can get a single value from it with:
    $print(list[0])
    This is called "indexing". Always remember that the index will start at 0!
    Try print the 3rd element in this list.
  example: |
    my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    print(my_list[0])
- title: "Variables - Test"
  content: |
    Make the print statement output the 3rd element of the list.
  example: |
    my_list = [0, 1, 2, 3]
    print(my_list[0])
  expect: |
    2
- title: "Dictionaries"
  content: |
    Dictionaries are like lists, but instead of using numbers to index them we can use strings like so:
    $dictionary = {"apples": 20, "bananas": 10}
    And you can get a value from it with:
    $print(dictionary["apples"])
    You can also store lists and dictionaries within each other to create even more complex data, but we'll come back to that later.
    Add a new key to the dictionary to remove the error.
  example: |
    my_dictionary = {"apples": 20, "bananas": 10}
    print(my_dictionary["carrots"])
- title: "If Statements"
  content: |
    'if' statements let you control the flow of your program.
    They are structured like so:
    $if <condition>:
    $   do this
    $else:
    $   do that
    You don't always need an else block but it will prevent you duplicating code!
    That's right! Programmers like to be lazy :)
    Try changing the program to print out "success!"
  example: |
    b = 1
    if b == 2:
        print("success")
    else:
        print("fail")
  expect: |
    success
- title: "For Loops"
  content: |
    .
  example: |
    .
- title: "While Loops"
  content: |
    .
  example: |
    .
- title: "Variables"
  content: |
    .
  example: |
    .
- title: "Variables"
  content: |
    .
  example: |
    .
- title: "Text Generator"
  content: "Hit run! You can trust me. ;)"
  example: |
    from src.main import generate_text_from_file
    generate_text_from_file('./thelorax.txt')
